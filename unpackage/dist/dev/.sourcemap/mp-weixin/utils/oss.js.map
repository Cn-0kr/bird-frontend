{"version":3,"file":"oss.js","sources":["utils/oss.js"],"sourcesContent":["/**\n * 阿里云OSS工具类\n * 提供图片URL生成、处理参数添加、缓存管理等功能\n * @author Frontend Developer\n * @date 2025-07-03\n */\n\nimport OSS_CONFIG, { getOSSConfig } from '@/config/oss.js'\n\n/**\n * OSS工具类\n * 封装所有与OSS相关的操作方法\n */\nclass OSSUtils {\n  constructor() {\n    this.config = getOSSConfig()\n    this.cache = new Map() // 内存缓存用于存储生成的URL\n    this.initializeCache()\n  }\n\n  /**\n   * 初始化缓存管理\n   * @private\n   */\n  initializeCache() {\n    // 如果启用了缓存，设置定时清理\n    if (this.config.cache.enableBrowserCache) {\n      setInterval(() => {\n        this.cleanExpiredCache()\n      }, 300000) // 每5分钟清理一次过期缓存\n    }\n  }\n\n  /**\n   * 获取OSS完整访问URL\n   * @param {string} filename - 文件名（包含路径）\n   * @param {Object} options - 可选参数\n   * @param {string} options.size - 图片尺寸预设 (thumbnail|small|medium|large|banner)\n   * @param {number} options.quality - 图片质量 (1-100)\n   * @param {string} options.format - 图片格式 (jpg|png|webp|gif)\n   * @param {boolean} options.useCustomDomain - 是否使用自定义域名\n   * @param {Object} options.customParams - 自定义图片处理参数\n   * @returns {string} 完整的OSS访问URL\n   */\n  getImageUrl(filename, options = {}) {\n    try {\n      // 参数验证\n      if (!filename || typeof filename !== 'string') {\n        throw new Error('Filename is required and must be a string')\n      }\n\n      // 生成缓存键\n      const cacheKey = this.generateCacheKey(filename, options)\n      \n      // 检查缓存\n      if (this.config.cache.enableBrowserCache && this.cache.has(cacheKey)) {\n        const cached = this.cache.get(cacheKey)\n        if (!this.isCacheExpired(cached.timestamp)) {\n          return cached.url\n        }\n      }\n\n      // 确定使用的域名\n      const baseUrl = options.useCustomDomain && this.config.customDomain \n        ? this.config.customDomain \n        : this.config.endpoint\n\n      // 清理文件名（移除开头的斜杠）\n      const cleanFilename = filename.startsWith('/') ? filename.slice(1) : filename\n\n      // 构建基础URL\n      let imageUrl = `${baseUrl}/${cleanFilename}`\n\n      // 添加图片处理参数\n      const processParams = this.buildImageProcessParams(options)\n      if (processParams) {\n        imageUrl += `?${processParams}`\n      }\n\n      // 缓存结果\n      if (this.config.cache.enableBrowserCache) {\n        this.cache.set(cacheKey, {\n          url: imageUrl,\n          timestamp: Date.now()\n        })\n      }\n\n      return imageUrl\n\n    } catch (error) {\n      console.error('生成OSS图片URL失败:', error)\n      // 返回原始文件名作为降级方案\n      return filename\n    }\n  }\n\n  /**\n   * 构建图片处理参数\n   * @param {Object} options - 处理选项\n   * @returns {string} URL查询参数字符串\n   * @private\n   */\n  buildImageProcessParams(options) {\n    const params = []\n    \n    // 如果当前环境禁用了图片优化，直接返回空字符串\n    if (!this.config.enableImageOptimization) {\n      return ''\n    }\n\n    // 图片尺寸处理\n    if (options.size && this.config.imageProcess.sizes[options.size]) {\n      const size = this.config.imageProcess.sizes[options.size]\n      params.push(`x-oss-process=image/resize,m_fill,w_${size.split('x')[0]},h_${size.split('x')[1]}`)\n    } else if (options.width || options.height) {\n      let resizeParam = 'x-oss-process=image/resize,m_lfit'\n      if (options.width) resizeParam += `,w_${options.width}`\n      if (options.height) resizeParam += `,h_${options.height}`\n      params.push(resizeParam)\n    }\n\n    // 图片质量\n    const quality = options.quality || this.config.imageProcess.quality\n    if (quality && quality !== 100) {\n      params.push(`x-oss-process=image/quality,q_${quality}`)\n    }\n\n    // 图片格式转换\n    const format = options.format || this.getOptimalFormat()\n    if (format && format !== 'original') {\n      params.push(`x-oss-process=image/format,${format}`)\n    }\n\n    // 自定义处理参数\n    if (options.customParams && typeof options.customParams === 'object') {\n      Object.entries(options.customParams).forEach(([key, value]) => {\n        params.push(`${key}=${value}`)\n      })\n    }\n\n    // 组合多个处理参数\n    if (params.length > 1) {\n      const processParams = params.filter(p => p.startsWith('x-oss-process=')).map(p => p.replace('x-oss-process=', ''))\n      const otherParams = params.filter(p => !p.startsWith('x-oss-process='))\n      \n      if (processParams.length > 0) {\n        const combinedProcess = `x-oss-process=${processParams.join('/')}`\n        return [combinedProcess, ...otherParams].join('&')\n      }\n    }\n\n    return params.join('&')\n  }\n\n  /**\n   * 获取最优图片格式\n   * @returns {string} 最优的图片格式\n   * @private\n   */\n  getOptimalFormat() {\n    // 检查浏览器对WebP的支持\n    if (this.supportsWebP()) {\n      return this.config.imageProcess.format\n    }\n    return this.config.imageProcess.fallbackFormat\n  }\n\n  /**\n   * 检查浏览器是否支持WebP格式\n   * @returns {boolean} 是否支持WebP\n   * @private\n   */\n  supportsWebP() {\n    if (typeof window === 'undefined') return false\n    \n    const canvas = document.createElement('canvas')\n    canvas.width = 1\n    canvas.height = 1\n    \n    return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0\n  }\n\n  /**\n   * 生成缓存键\n   * @param {string} filename - 文件名\n   * @param {Object} options - 选项\n   * @returns {string} 缓存键\n   * @private\n   */\n  generateCacheKey(filename, options) {\n    const optionsStr = JSON.stringify(options)\n    return `${filename}_${btoa(optionsStr)}`\n  }\n\n  /**\n   * 检查缓存是否过期\n   * @param {number} timestamp - 缓存时间戳\n   * @returns {boolean} 是否过期\n   * @private\n   */\n  isCacheExpired(timestamp) {\n    return Date.now() - timestamp > this.config.cache.maxAge * 1000\n  }\n\n  /**\n   * 清理过期缓存\n   * @private\n   */\n  cleanExpiredCache() {\n    for (const [key, value] of this.cache.entries()) {\n      if (this.isCacheExpired(value.timestamp)) {\n        this.cache.delete(key)\n      }\n    }\n  }\n\n  /**\n   * 批量生成图片URL\n   * @param {Array<string>} filenames - 文件名数组\n   * @param {Object} options - 处理选项\n   * @returns {Array<string>} URL数组\n   */\n  batchGetImageUrls(filenames, options = {}) {\n    if (!Array.isArray(filenames)) {\n      throw new Error('Filenames must be an array')\n    }\n\n    return filenames.map(filename => this.getImageUrl(filename, options))\n  }\n\n  /**\n   * 预加载图片\n   * @param {string|Array<string>} urls - 图片URL或URL数组\n   * @returns {Promise<Array>} 预加载结果Promise数组\n   */\n  preloadImages(urls) {\n    const urlArray = Array.isArray(urls) ? urls : [urls]\n    \n    return Promise.allSettled(\n      urlArray.map(url => {\n        return new Promise((resolve, reject) => {\n          const img = new Image()\n          img.onload = () => resolve(url)\n          img.onerror = () => reject(new Error(`Failed to load image: ${url}`))\n          img.src = url\n        })\n      })\n    )\n  }\n\n  /**\n   * 获取响应式图片URL集合\n   * @param {string} filename - 文件名\n   * @param {Array<string>} sizes - 尺寸数组\n   * @param {Object} options - 额外选项\n   * @returns {Object} 响应式图片URL对象\n   */\n  getResponsiveImageUrls(filename, sizes = ['small', 'medium', 'large'], options = {}) {\n    const result = {}\n    \n    sizes.forEach(size => {\n      result[size] = this.getImageUrl(filename, { ...options, size })\n    })\n    \n    return result\n  }\n\n  /**\n   * 生成图片srcset属性值\n   * @param {string} filename - 文件名\n   * @param {Object} sizeMapping - 尺寸映射 {size: 'width_descriptor'}\n   * @param {Object} options - 额外选项\n   * @returns {string} srcset属性值\n   */\n  generateSrcSet(filename, sizeMapping = {\n    small: '480w',\n    medium: '768w', \n    large: '1200w'\n  }, options = {}) {\n    return Object.entries(sizeMapping)\n      .map(([size, descriptor]) => {\n        const url = this.getImageUrl(filename, { ...options, size })\n        return `${url} ${descriptor}`\n      })\n      .join(', ')\n  }\n\n  /**\n   * 清空缓存\n   */\n  clearCache() {\n    this.cache.clear()\n  }\n\n  /**\n   * 获取缓存统计信息\n   * @returns {Object} 缓存统计\n   */\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    }\n  }\n}\n\n// 创建单例实例\nconst ossUtils = new OSSUtils()\n\n/**\n * 快捷方法：获取图片URL\n * @param {string} filename - 文件名\n * @param {Object} options - 选项\n * @returns {string} 图片URL\n */\nexport const getImageUrl = (filename, options) => ossUtils.getImageUrl(filename, options)\n\n/**\n * 快捷方法：批量获取图片URL\n * @param {Array<string>} filenames - 文件名数组\n * @param {Object} options - 选项\n * @returns {Array<string>} URL数组\n */\nexport const batchGetImageUrls = (filenames, options) => ossUtils.batchGetImageUrls(filenames, options)\n\n/**\n * 快捷方法：预加载图片\n * @param {string|Array<string>} urls - URL或URL数组\n * @returns {Promise<Array>} 预加载结果\n */\nexport const preloadImages = (urls) => ossUtils.preloadImages(urls)\n\n/**\n * 快捷方法：获取响应式图片URLs\n * @param {string} filename - 文件名\n * @param {Array<string>} sizes - 尺寸数组\n * @param {Object} options - 选项\n * @returns {Object} 响应式图片URL对象\n */\nexport const getResponsiveImageUrls = (filename, sizes, options) => ossUtils.getResponsiveImageUrls(filename, sizes, options)\n\n/**\n * 快捷方法：生成srcset\n * @param {string} filename - 文件名\n * @param {Object} sizeMapping - 尺寸映射\n * @param {Object} options - 选项\n * @returns {string} srcset属性值\n */\nexport const generateSrcSet = (filename, sizeMapping, options) => ossUtils.generateSrcSet(filename, sizeMapping, options)\n\n// 导出工具类实例\nexport default ossUtils\n\n/**\n * 使用示例：\n * \n * import { getImageUrl, preloadImages, getResponsiveImageUrls } from '@/utils/oss.js'\n * \n * // 基础用法\n * const imageUrl = getImageUrl('images/avatar.jpg')\n * \n * // 带参数用法\n * const thumbnailUrl = getImageUrl('images/avatar.jpg', { \n *   size: 'thumbnail', \n *   quality: 90 \n * })\n * \n * // 自定义尺寸\n * const customUrl = getImageUrl('images/banner.jpg', { \n *   width: 800, \n *   height: 400, \n *   format: 'webp' \n * })\n * \n * // 响应式图片\n * const responsiveUrls = getResponsiveImageUrls('images/hero.jpg')\n * // 结果: { small: '...', medium: '...', large: '...' }\n * \n * // 预加载图片\n * preloadImages([imageUrl, thumbnailUrl]).then(results => {\n *   console.log('预加载完成', results)\n * })\n */"],"names":["getOSSConfig","uni"],"mappings":"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"}