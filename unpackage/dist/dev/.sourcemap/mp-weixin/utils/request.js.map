{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\r\n * 网络请求工具函数\r\n * 统一处理API请求、错误处理、重试机制等\r\n */\r\n\r\nimport { API_CONFIG, STATUS_CODES, ERROR_MESSAGES, STORAGE_KEYS } from '@/config/api.js';\r\n\r\n/**\r\n * 请求类\r\n */\r\nclass RequestManager {\r\n  constructor() {\r\n    // 请求队列\r\n    this.requestQueue = new Map();\r\n    // 重试队列\r\n    this.retryQueue = new Map();\r\n    // 请求拦截器\r\n    this.requestInterceptors = [];\r\n    // 响应拦截器\r\n    this.responseInterceptors = [];\r\n    // 错误处理器\r\n    this.errorHandlers = new Map();\r\n    // 加载状态管理\r\n    this.loadingStates = new Set();\r\n  }\r\n\r\n  /**\r\n   * 添加请求拦截器\r\n   * @param {Function} interceptor - 拦截器函数\r\n   */\r\n  addRequestInterceptor(interceptor) {\r\n    this.requestInterceptors.push(interceptor);\r\n  }\r\n\r\n  /**\r\n   * 添加响应拦截器\r\n   * @param {Function} interceptor - 拦截器函数\r\n   */\r\n  addResponseInterceptor(interceptor) {\r\n    this.responseInterceptors.push(interceptor);\r\n  }\r\n\r\n  /**\r\n   * 添加错误处理器\r\n   * @param {Number} statusCode - HTTP状态码\r\n   * @param {Function} handler - 处理函数\r\n   */\r\n  addErrorHandler(statusCode, handler) {\r\n    this.errorHandlers.set(statusCode, handler);\r\n  }\r\n\r\n  /**\r\n   * 获取存储的Token\r\n   * @returns {String|null} Token\r\n   */\r\n  getToken() {\r\n    try {\r\n      return uni.getStorageSync(STORAGE_KEYS.TOKEN);\r\n    } catch (error) {\r\n      console.error('获取Token失败:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置Token\r\n   * @param {String} token - Token值\r\n   */\r\n  setToken(token) {\r\n    try {\r\n      uni.setStorageSync(STORAGE_KEYS.TOKEN, token);\r\n    } catch (error) {\r\n      console.error('设置Token失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除Token\r\n   */\r\n  clearToken() {\r\n    try {\r\n      uni.removeStorageSync(STORAGE_KEYS.TOKEN);\r\n      uni.removeStorageSync(STORAGE_KEYS.REFRESH_TOKEN);\r\n      uni.removeStorageSync(STORAGE_KEYS.USER_INFO);\r\n    } catch (error) {\r\n      console.error('清除Token失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 构建请求头\r\n   * @param {Object} customHeaders - 自定义请求头\r\n   * @returns {Object} 完整的请求头\r\n   */\r\n  buildHeaders(customHeaders = {}) {\r\n    const headers = {\r\n      ...API_CONFIG.HEADERS,\r\n      ...customHeaders\r\n    };\r\n\r\n    // 添加授权头\r\n    const token = this.getToken();\r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    // 添加设备信息\r\n    const systemInfo = uni.getSystemInfoSync();\r\n    headers['X-Device-Type'] = systemInfo.platform;\r\n    headers['X-Device-Model'] = systemInfo.model;\r\n    headers['X-App-Version'] = systemInfo.version;\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 生成请求唯一标识\r\n   * @param {Object} options - 请求配置\r\n   * @returns {String} 请求标识\r\n   */\r\n  generateRequestId(options) {\r\n    const { url, method, data } = options;\r\n    const dataStr = data ? JSON.stringify(data) : '';\r\n    return `${method}_${url}_${dataStr}`.replace(/[^a-zA-Z0-9]/g, '_');\r\n  }\r\n\r\n  /**\r\n   * 检查是否为重复请求\r\n   * @param {String} requestId - 请求ID\r\n   * @returns {Boolean} 是否重复\r\n   */\r\n  isDuplicateRequest(requestId) {\r\n    return this.requestQueue.has(requestId);\r\n  }\r\n\r\n  /**\r\n   * 添加到请求队列\r\n   * @param {String} requestId - 请求ID\r\n   * @param {Promise} promise - 请求Promise\r\n   */\r\n  addToQueue(requestId, promise) {\r\n    this.requestQueue.set(requestId, promise);\r\n    \r\n    // 请求完成后从队列中移除\r\n    promise.finally(() => {\r\n      this.requestQueue.delete(requestId);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 显示加载状态\r\n   * @param {String} requestId - 请求ID\r\n   * @param {Object} loadingConfig - 加载配置\r\n   */\r\n  showLoading(requestId, loadingConfig = {}) {\r\n    if (loadingConfig.showLoading !== false && !this.loadingStates.has(requestId)) {\r\n      this.loadingStates.add(requestId);\r\n      \r\n      uni.showLoading({\r\n        title: loadingConfig.loadingText || '加载中...',\r\n        mask: loadingConfig.mask !== false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 隐藏加载状态\r\n   * @param {String} requestId - 请求ID\r\n   */\r\n  hideLoading(requestId) {\r\n    if (this.loadingStates.has(requestId)) {\r\n      this.loadingStates.delete(requestId);\r\n      \r\n      // 如果没有其他请求在加载，则隐藏loading\r\n      if (this.loadingStates.size === 0) {\r\n        uni.hideLoading();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行请求拦截器\r\n   * @param {Object} config - 请求配置\r\n   * @returns {Object} 处理后的配置\r\n   */\r\n  async executeRequestInterceptors(config) {\r\n    let processedConfig = { ...config };\r\n    \r\n    for (const interceptor of this.requestInterceptors) {\r\n      try {\r\n        processedConfig = await interceptor(processedConfig) || processedConfig;\r\n      } catch (error) {\r\n        console.error('请求拦截器执行失败:', error);\r\n      }\r\n    }\r\n    \r\n    return processedConfig;\r\n  }\r\n\r\n  /**\r\n   * 执行响应拦截器\r\n   * @param {Object} response - 响应数据\r\n   * @returns {Object} 处理后的响应\r\n   */\r\n  async executeResponseInterceptors(response) {\r\n    let processedResponse = { ...response };\r\n    \r\n    for (const interceptor of this.responseInterceptors) {\r\n      try {\r\n        processedResponse = await interceptor(processedResponse) || processedResponse;\r\n      } catch (error) {\r\n        console.error('响应拦截器执行失败:', error);\r\n      }\r\n    }\r\n    \r\n    return processedResponse;\r\n  }\r\n\r\n  /**\r\n   * 处理响应错误\r\n   * @param {Object} error - 错误对象\r\n   * @param {Object} config - 请求配置\r\n   * @returns {Promise} 处理结果\r\n   */\r\n  async handleResponseError(error, config) {\r\n    const { statusCode } = error;\r\n    \r\n    // 执行自定义错误处理器\r\n    if (this.errorHandlers.has(statusCode)) {\r\n      try {\r\n        const handler = this.errorHandlers.get(statusCode);\r\n        const result = await handler(error, config);\r\n        if (result) return result;\r\n      } catch (handlerError) {\r\n        console.error('错误处理器执行失败:', handlerError);\r\n      }\r\n    }\r\n    \r\n    // 处理特定错误\r\n    switch (statusCode) {\r\n      case STATUS_CODES.UNAUTHORIZED:\r\n        return this.handleUnauthorized(error, config);\r\n      \r\n      case STATUS_CODES.FORBIDDEN:\r\n        return this.handleForbidden(error, config);\r\n      \r\n      case STATUS_CODES.TOO_MANY_REQUESTS:\r\n        return this.handleRateLimit(error, config);\r\n      \r\n      case STATUS_CODES.INTERNAL_SERVER_ERROR:\r\n      case STATUS_CODES.SERVICE_UNAVAILABLE:\r\n      case STATUS_CODES.GATEWAY_TIMEOUT:\r\n        return this.handleServerError(error, config);\r\n      \r\n      default:\r\n        throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理未授权错误\r\n   * @param {Object} error - 错误对象\r\n   * @param {Object} config - 请求配置\r\n   */\r\n  async handleUnauthorized(error, config) {\r\n    // 清除本地Token\r\n    this.clearToken();\r\n    \r\n    // 跳转到登录页\r\n    uni.reLaunch({\r\n      url: '/pages/login/login'\r\n    });\r\n    \r\n    // 发送全局事件\r\n    uni.$emit('tokenExpired');\r\n    \r\n    throw new Error(ERROR_MESSAGES.INVALID_TOKEN);\r\n  }\r\n\r\n  /**\r\n   * 处理禁止访问错误\r\n   * @param {Object} error - 错误对象\r\n   * @param {Object} config - 请求配置\r\n   */\r\n  async handleForbidden(error, config) {\r\n    uni.showToast({\r\n      title: ERROR_MESSAGES.FORBIDDEN,\r\n      icon: 'error'\r\n    });\r\n    \r\n    throw new Error(ERROR_MESSAGES.FORBIDDEN);\r\n  }\r\n\r\n  /**\r\n   * 处理频率限制错误\r\n   * @param {Object} error - 错误对象\r\n   * @param {Object} config - 请求配置\r\n   */\r\n  async handleRateLimit(error, config) {\r\n    const retryAfter = error.header?.['Retry-After'] || 60;\r\n    \r\n    uni.showToast({\r\n      title: `请求过于频繁，请${retryAfter}秒后重试`,\r\n      icon: 'error',\r\n      duration: 3000\r\n    });\r\n    \r\n    // 添加到重试队列\r\n    setTimeout(() => {\r\n      this.request(config);\r\n    }, retryAfter * 1000);\r\n    \r\n    throw new Error(ERROR_MESSAGES.TOO_MANY_REQUESTS);\r\n  }\r\n\r\n  /**\r\n   * 处理服务器错误\r\n   * @param {Object} error - 错误对象\r\n   * @param {Object} config - 请求配置\r\n   */\r\n  async handleServerError(error, config) {\r\n    // 自动重试\r\n    if (config.retryCount > 0) {\r\n      config.retryCount--;\r\n      \r\n      // 延迟重试\r\n      await new Promise(resolve => {\r\n        setTimeout(resolve, API_CONFIG.RETRY_DELAY);\r\n      });\r\n      \r\n      return this.request(config);\r\n    }\r\n    \r\n    throw new Error(ERROR_MESSAGES.INTERNAL_SERVER_ERROR);\r\n  }\r\n\r\n  /**\r\n   * 处理网络错误\r\n   * @param {Object} error - 错误对象\r\n   * @param {Object} config - 请求配置\r\n   */\r\n  async handleNetworkError(error, config) {\r\n    // 检查网络状态\r\n    const networkType = await this.getNetworkType();\r\n    \r\n    if (networkType === 'none') {\r\n      uni.showToast({\r\n        title: '网络连接不可用',\r\n        icon: 'error'\r\n      });\r\n      throw new Error(ERROR_MESSAGES.NETWORK_ERROR);\r\n    }\r\n    \r\n    // 网络重试\r\n    if (config.retryCount > 0) {\r\n      config.retryCount--;\r\n      \r\n      await new Promise(resolve => {\r\n        setTimeout(resolve, API_CONFIG.RETRY_DELAY);\r\n      });\r\n      \r\n      return this.request(config);\r\n    }\r\n    \r\n    throw new Error(ERROR_MESSAGES.NETWORK_ERROR);\r\n  }\r\n\r\n  /**\r\n   * 获取网络类型\r\n   * @returns {Promise<String>} 网络类型\r\n   */\r\n  getNetworkType() {\r\n    return new Promise((resolve) => {\r\n      uni.getNetworkType({\r\n        success: (res) => {\r\n          resolve(res.networkType);\r\n        },\r\n        fail: () => {\r\n          resolve('unknown');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 主请求方法\r\n   * @param {Object} options - 请求配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  async request(options) {\r\n    // 生成请求ID\r\n    const requestId = this.generateRequestId(options);\r\n    \r\n    try {\r\n      // 检查重复请求\r\n      if (this.isDuplicateRequest(requestId)) {\r\n        return this.requestQueue.get(requestId);\r\n      }\r\n      \r\n      // 执行请求拦截器\r\n      const config = await this.executeRequestInterceptors({\r\n        retryCount: API_CONFIG.RETRY_COUNT,\r\n        timeout: API_CONFIG.TIMEOUT,\r\n        ...options\r\n      });\r\n      \r\n      // 显示加载状态\r\n      this.showLoading(requestId, config);\r\n      \r\n      // 构建请求参数\r\n      const requestOptions = {\r\n        url: config.url,\r\n        method: config.method || 'GET',\r\n        header: this.buildHeaders(config.header),\r\n        timeout: config.timeout\r\n      };\r\n      \r\n      // 处理请求数据\r\n      if (config.data) {\r\n        if (config.method === 'GET') {\r\n          requestOptions.url += this.buildQueryString(config.data);\r\n        } else {\r\n          requestOptions.data = config.data;\r\n        }\r\n      }\r\n      \r\n      // 处理文件上传\r\n      if (config.filePath) {\r\n        return this.uploadFile({\r\n          ...requestOptions,\r\n          filePath: config.filePath,\r\n          name: config.name || 'file',\r\n          formData: config.formData\r\n        }, requestId);\r\n      }\r\n      \r\n      // 发送请求\r\n      const requestPromise = this.sendRequest(requestOptions);\r\n      this.addToQueue(requestId, requestPromise);\r\n      \r\n      const response = await requestPromise;\r\n      \r\n      // 执行响应拦截器\r\n      const processedResponse = await this.executeResponseInterceptors(response);\r\n      \r\n      return processedResponse;\r\n      \r\n    } catch (error) {\r\n      // 错误处理\r\n      try {\r\n        return await this.handleResponseError(error, options);\r\n      } catch (handledError) {\r\n        throw handledError;\r\n      }\r\n    } finally {\r\n      // 隐藏加载状态\r\n      this.hideLoading(requestId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送HTTP请求\r\n   * @param {Object} options - 请求参数\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  sendRequest(options) {\r\n    return new Promise((resolve, reject) => {\r\n      uni.request({\r\n        ...options,\r\n        success: (response) => {\r\n          const { statusCode, data, header } = response;\r\n          \r\n          if (statusCode >= 200 && statusCode < 300) {\r\n            resolve({\r\n              data,\r\n              statusCode,\r\n              header,\r\n              success: true\r\n            });\r\n          } else {\r\n            reject({\r\n              statusCode,\r\n              data,\r\n              header,\r\n              message: data?.message || ERROR_MESSAGES[statusCode] || ERROR_MESSAGES.UNKNOWN_ERROR\r\n            });\r\n          }\r\n        },\r\n        fail: (error) => {\r\n          // 网络错误\r\n          if (error.errMsg?.includes('timeout')) {\r\n            reject({\r\n              statusCode: STATUS_CODES.REQUEST_TIMEOUT,\r\n              message: ERROR_MESSAGES.TIMEOUT_ERROR,\r\n              isTimeout: true\r\n            });\r\n          } else {\r\n            reject({\r\n              statusCode: 0,\r\n              message: ERROR_MESSAGES.NETWORK_ERROR,\r\n              isNetworkError: true,\r\n              error\r\n            });\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 上传文件\r\n   * @param {Object} options - 上传参数\r\n   * @param {String} requestId - 请求ID\r\n   * @returns {Promise} 上传结果\r\n   */\r\n  uploadFile(options, requestId) {\r\n    return new Promise((resolve, reject) => {\r\n      const uploadTask = uni.uploadFile({\r\n        ...options,\r\n        success: (response) => {\r\n          const { statusCode, data } = response;\r\n          \r\n          if (statusCode >= 200 && statusCode < 300) {\r\n            try {\r\n              const responseData = typeof data === 'string' ? JSON.parse(data) : data;\r\n              resolve({\r\n                data: responseData,\r\n                statusCode,\r\n                success: true\r\n              });\r\n            } catch (parseError) {\r\n              resolve({\r\n                data,\r\n                statusCode,\r\n                success: true\r\n              });\r\n            }\r\n          } else {\r\n            reject({\r\n              statusCode,\r\n              message: ERROR_MESSAGES.UPLOAD_ERROR\r\n            });\r\n          }\r\n        },\r\n        fail: (error) => {\r\n          reject({\r\n            statusCode: 0,\r\n            message: ERROR_MESSAGES.UPLOAD_ERROR,\r\n            error\r\n          });\r\n        }\r\n      });\r\n      \r\n      // 监听上传进度\r\n      uploadTask.onProgressUpdate((progress) => {\r\n        uni.$emit('uploadProgress', {\r\n          requestId,\r\n          progress: progress.progress,\r\n          totalBytesSent: progress.totalBytesSent,\r\n          totalBytesExpectedToSend: progress.totalBytesExpectedToSend\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 构建查询字符串\r\n   * @param {Object} params - 参数对象\r\n   * @returns {String} 查询字符串\r\n   */\r\n  buildQueryString(params) {\r\n    if (!params || typeof params !== 'object') {\r\n      return '';\r\n    }\r\n    \r\n    const query = Object.keys(params)\r\n      .filter(key => params[key] !== undefined && params[key] !== null)\r\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\r\n      .join('&');\r\n    \r\n    return query ? `?${query}` : '';\r\n  }\r\n\r\n  /**\r\n   * GET请求\r\n   * @param {String} url - 请求地址\r\n   * @param {Object} params - 请求参数\r\n   * @param {Object} config - 请求配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  get(url, params = {}, config = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'GET',\r\n      data: params,\r\n      ...config\r\n    });\r\n  }\r\n\r\n  /**\r\n   * POST请求\r\n   * @param {String} url - 请求地址\r\n   * @param {Object} data - 请求数据\r\n   * @param {Object} config - 请求配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  post(url, data = {}, config = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'POST',\r\n      data,\r\n      ...config\r\n    });\r\n  }\r\n\r\n  /**\r\n   * PUT请求\r\n   * @param {String} url - 请求地址\r\n   * @param {Object} data - 请求数据\r\n   * @param {Object} config - 请求配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  put(url, data = {}, config = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'PUT',\r\n      data,\r\n      ...config\r\n    });\r\n  }\r\n\r\n  /**\r\n   * DELETE请求\r\n   * @param {String} url - 请求地址\r\n   * @param {Object} config - 请求配置\r\n   * @returns {Promise} 请求结果\r\n   */\r\n  delete(url, config = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'DELETE',\r\n      ...config\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 上传文件\r\n   * @param {String} url - 上传地址\r\n   * @param {String} filePath - 文件路径\r\n   * @param {Object} config - 上传配置\r\n   * @returns {Promise} 上传结果\r\n   */\r\n  upload(url, filePath, config = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'POST',\r\n      filePath,\r\n      ...config\r\n    });\r\n  }\r\n}\r\n\r\n// 创建请求管理器实例\r\nconst requestManager = new RequestManager();\r\n\r\n// 添加默认请求拦截器\r\nrequestManager.addRequestInterceptor((config) => {\r\n  // 记录请求日志\r\n  console.log('请求发送:', {\r\n    url: config.url,\r\n    method: config.method,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n  \r\n  return config;\r\n});\r\n\r\n// 添加默认响应拦截器\r\nrequestManager.addResponseInterceptor((response) => {\r\n  // 记录响应日志\r\n  console.log('响应接收:', {\r\n    url: response.config?.url,\r\n    statusCode: response.statusCode,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n  \r\n  return response;\r\n});\r\n\r\n// 导出请求函数\r\nexport const request = requestManager.request.bind(requestManager);\r\nexport const get = requestManager.get.bind(requestManager);\r\nexport const post = requestManager.post.bind(requestManager);\r\nexport const put = requestManager.put.bind(requestManager);\r\nexport const del = requestManager.delete.bind(requestManager);\r\nexport const upload = requestManager.upload.bind(requestManager);\r\n\r\n// 导出请求管理器\r\nexport default requestManager;"],"names":["uni","STORAGE_KEYS","API_CONFIG","STATUS_CODES","ERROR_MESSAGES"],"mappings":";;;AAUA,MAAM,eAAe;AAAA,EACnB,cAAc;AAEZ,SAAK,eAAe,oBAAI;AAExB,SAAK,aAAa,oBAAI;AAEtB,SAAK,sBAAsB;AAE3B,SAAK,uBAAuB;AAE5B,SAAK,gBAAgB,oBAAI;AAEzB,SAAK,gBAAgB,oBAAI;EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,sBAAsB,aAAa;AACjC,SAAK,oBAAoB,KAAK,WAAW;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,uBAAuB,aAAa;AAClC,SAAK,qBAAqB,KAAK,WAAW;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,gBAAgB,YAAY,SAAS;AACnC,SAAK,cAAc,IAAI,YAAY,OAAO;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,WAAW;AACT,QAAI;AACF,aAAOA,oBAAI,eAAeC,WAAY,aAAC,KAAK;AAAA,IAC7C,SAAQ,OAAO;AACdD,oBAAc,MAAA,MAAA,SAAA,0BAAA,cAAc,KAAK;AACjC,aAAO;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,SAAS,OAAO;AACd,QAAI;AACFA,oBAAAA,MAAI,eAAeC,WAAAA,aAAa,OAAO,KAAK;AAAA,IAC7C,SAAQ,OAAO;AACdD,oBAAc,MAAA,MAAA,SAAA,0BAAA,cAAc,KAAK;AAAA,IAClC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKD,aAAa;AACX,QAAI;AACFA,oBAAAA,MAAI,kBAAkBC,wBAAa,KAAK;AACxCD,oBAAAA,MAAI,kBAAkBC,wBAAa,aAAa;AAChDD,oBAAAA,MAAI,kBAAkBC,wBAAa,SAAS;AAAA,IAC7C,SAAQ,OAAO;AACdD,oBAAc,MAAA,MAAA,SAAA,0BAAA,cAAc,KAAK;AAAA,IAClC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,gBAAgB,IAAI;AAC/B,UAAM,UAAU;AAAA,MACd,GAAGE,WAAU,WAAC;AAAA,MACd,GAAG;AAAA,IACT;AAGI,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,cAAQ,eAAe,IAAI,UAAU,KAAK;AAAA,IAC3C;AAGD,UAAM,aAAaF,oBAAI;AACvB,YAAQ,eAAe,IAAI,WAAW;AACtC,YAAQ,gBAAgB,IAAI,WAAW;AACvC,YAAQ,eAAe,IAAI,WAAW;AAEtC,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,kBAAkB,SAAS;AACzB,UAAM,EAAE,KAAK,QAAQ,KAAI,IAAK;AAC9B,UAAM,UAAU,OAAO,KAAK,UAAU,IAAI,IAAI;AAC9C,WAAO,GAAG,MAAM,IAAI,GAAG,IAAI,OAAO,GAAG,QAAQ,iBAAiB,GAAG;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,mBAAmB,WAAW;AAC5B,WAAO,KAAK,aAAa,IAAI,SAAS;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,WAAW,WAAW,SAAS;AAC7B,SAAK,aAAa,IAAI,WAAW,OAAO;AAGxC,YAAQ,QAAQ,MAAM;AACpB,WAAK,aAAa,OAAO,SAAS;AAAA,IACxC,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAY,WAAW,gBAAgB,IAAI;AACzC,QAAI,cAAc,gBAAgB,SAAS,CAAC,KAAK,cAAc,IAAI,SAAS,GAAG;AAC7E,WAAK,cAAc,IAAI,SAAS;AAEhCA,oBAAAA,MAAI,YAAY;AAAA,QACd,OAAO,cAAc,eAAe;AAAA,QACpC,MAAM,cAAc,SAAS;AAAA,MACrC,CAAO;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,YAAY,WAAW;AACrB,QAAI,KAAK,cAAc,IAAI,SAAS,GAAG;AACrC,WAAK,cAAc,OAAO,SAAS;AAGnC,UAAI,KAAK,cAAc,SAAS,GAAG;AACjCA,sBAAG,MAAC,YAAW;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,2BAA2B,QAAQ;AACvC,QAAI,kBAAkB,EAAE,GAAG;AAE3B,eAAW,eAAe,KAAK,qBAAqB;AAClD,UAAI;AACF,0BAAkB,MAAM,YAAY,eAAe,KAAK;AAAA,MACzD,SAAQ,OAAO;AACdA,sBAAA,MAAA,MAAA,SAAA,2BAAc,cAAc,KAAK;AAAA,MAClC;AAAA,IACF;AAED,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,4BAA4B,UAAU;AAC1C,QAAI,oBAAoB,EAAE,GAAG;AAE7B,eAAW,eAAe,KAAK,sBAAsB;AACnD,UAAI;AACF,4BAAoB,MAAM,YAAY,iBAAiB,KAAK;AAAA,MAC7D,SAAQ,OAAO;AACdA,sBAAA,MAAA,MAAA,SAAA,2BAAc,cAAc,KAAK;AAAA,MAClC;AAAA,IACF;AAED,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAM,oBAAoB,OAAO,QAAQ;AACvC,UAAM,EAAE,WAAY,IAAG;AAGvB,QAAI,KAAK,cAAc,IAAI,UAAU,GAAG;AACtC,UAAI;AACF,cAAM,UAAU,KAAK,cAAc,IAAI,UAAU;AACjD,cAAM,SAAS,MAAM,QAAQ,OAAO,MAAM;AAC1C,YAAI;AAAQ,iBAAO;AAAA,MACpB,SAAQ,cAAc;AACrBA,sBAAA,MAAA,MAAA,SAAA,2BAAc,cAAc,YAAY;AAAA,MACzC;AAAA,IACF;AAGD,YAAQ,YAAU;AAAA,MAChB,KAAKG,WAAY,aAAC;AAChB,eAAO,KAAK,mBAAmB,OAAO,MAAM;AAAA,MAE9C,KAAKA,WAAY,aAAC;AAChB,eAAO,KAAK,gBAAgB,OAAO,MAAM;AAAA,MAE3C,KAAKA,WAAY,aAAC;AAChB,eAAO,KAAK,gBAAgB,OAAO,MAAM;AAAA,MAE3C,KAAKA,WAAAA,aAAa;AAAA,MAClB,KAAKA,WAAAA,aAAa;AAAA,MAClB,KAAKA,WAAY,aAAC;AAChB,eAAO,KAAK,kBAAkB,OAAO,MAAM;AAAA,MAE7C;AACE,cAAM;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,mBAAmB,OAAO,QAAQ;AAEtC,SAAK,WAAU;AAGfH,kBAAAA,MAAI,SAAS;AAAA,MACX,KAAK;AAAA,IACX,CAAK;AAGDA,wBAAI,MAAM,cAAc;AAExB,UAAM,IAAI,MAAMI,0BAAe,aAAa;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,gBAAgB,OAAO,QAAQ;AACnCJ,kBAAAA,MAAI,UAAU;AAAA,MACZ,OAAOI,WAAc,eAAC;AAAA,MACtB,MAAM;AAAA,IACZ,CAAK;AAED,UAAM,IAAI,MAAMA,0BAAe,SAAS;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,gBAAgB,OAAO,QAAQ;;AACnC,UAAM,eAAa,WAAM,WAAN,mBAAe,mBAAkB;AAEpDJ,kBAAAA,MAAI,UAAU;AAAA,MACZ,OAAO,WAAW,UAAU;AAAA,MAC5B,MAAM;AAAA,MACN,UAAU;AAAA,IAChB,CAAK;AAGD,eAAW,MAAM;AACf,WAAK,QAAQ,MAAM;AAAA,IACzB,GAAO,aAAa,GAAI;AAEpB,UAAM,IAAI,MAAMI,0BAAe,iBAAiB;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,kBAAkB,OAAO,QAAQ;AAErC,QAAI,OAAO,aAAa,GAAG;AACzB,aAAO;AAGP,YAAM,IAAI,QAAQ,aAAW;AAC3B,mBAAW,SAASF,sBAAW,WAAW;AAAA,MAClD,CAAO;AAED,aAAO,KAAK,QAAQ,MAAM;AAAA,IAC3B;AAED,UAAM,IAAI,MAAME,0BAAe,qBAAqB;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,mBAAmB,OAAO,QAAQ;AAEtC,UAAM,cAAc,MAAM,KAAK;AAE/B,QAAI,gBAAgB,QAAQ;AAC1BJ,oBAAAA,MAAI,UAAU;AAAA,QACZ,OAAO;AAAA,QACP,MAAM;AAAA,MACd,CAAO;AACD,YAAM,IAAI,MAAMI,0BAAe,aAAa;AAAA,IAC7C;AAGD,QAAI,OAAO,aAAa,GAAG;AACzB,aAAO;AAEP,YAAM,IAAI,QAAQ,aAAW;AAC3B,mBAAW,SAASF,sBAAW,WAAW;AAAA,MAClD,CAAO;AAED,aAAO,KAAK,QAAQ,MAAM;AAAA,IAC3B;AAED,UAAM,IAAI,MAAME,0BAAe,aAAa;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,iBAAiB;AACf,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9BJ,oBAAAA,MAAI,eAAe;AAAA,QACjB,SAAS,CAAC,QAAQ;AAChB,kBAAQ,IAAI,WAAW;AAAA,QACxB;AAAA,QACD,MAAM,MAAM;AACV,kBAAQ,SAAS;AAAA,QAClB;AAAA,MACT,CAAO;AAAA,IACP,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,QAAQ,SAAS;AAErB,UAAM,YAAY,KAAK,kBAAkB,OAAO;AAEhD,QAAI;AAEF,UAAI,KAAK,mBAAmB,SAAS,GAAG;AACtC,eAAO,KAAK,aAAa,IAAI,SAAS;AAAA,MACvC;AAGD,YAAM,SAAS,MAAM,KAAK,2BAA2B;AAAA,QACnD,YAAYE,WAAU,WAAC;AAAA,QACvB,SAASA,WAAU,WAAC;AAAA,QACpB,GAAG;AAAA,MACX,CAAO;AAGD,WAAK,YAAY,WAAW,MAAM;AAGlC,YAAM,iBAAiB;AAAA,QACrB,KAAK,OAAO;AAAA,QACZ,QAAQ,OAAO,UAAU;AAAA,QACzB,QAAQ,KAAK,aAAa,OAAO,MAAM;AAAA,QACvC,SAAS,OAAO;AAAA,MACxB;AAGM,UAAI,OAAO,MAAM;AACf,YAAI,OAAO,WAAW,OAAO;AAC3B,yBAAe,OAAO,KAAK,iBAAiB,OAAO,IAAI;AAAA,QACjE,OAAe;AACL,yBAAe,OAAO,OAAO;AAAA,QAC9B;AAAA,MACF;AAGD,UAAI,OAAO,UAAU;AACnB,eAAO,KAAK,WAAW;AAAA,UACrB,GAAG;AAAA,UACH,UAAU,OAAO;AAAA,UACjB,MAAM,OAAO,QAAQ;AAAA,UACrB,UAAU,OAAO;AAAA,QAClB,GAAE,SAAS;AAAA,MACb;AAGD,YAAM,iBAAiB,KAAK,YAAY,cAAc;AACtD,WAAK,WAAW,WAAW,cAAc;AAEzC,YAAM,WAAW,MAAM;AAGvB,YAAM,oBAAoB,MAAM,KAAK,4BAA4B,QAAQ;AAEzE,aAAO;AAAA,IAER,SAAQ,OAAO;AAEd,UAAI;AACF,eAAO,MAAM,KAAK,oBAAoB,OAAO,OAAO;AAAA,MACrD,SAAQ,cAAc;AACrB,cAAM;AAAA,MACP;AAAA,IACP,UAAc;AAER,WAAK,YAAY,SAAS;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAY,SAAS;AACnB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCF,oBAAAA,MAAI,QAAQ;AAAA,QACV,GAAG;AAAA,QACH,SAAS,CAAC,aAAa;AACrB,gBAAM,EAAE,YAAY,MAAM,OAAM,IAAK;AAErC,cAAI,cAAc,OAAO,aAAa,KAAK;AACzC,oBAAQ;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,cACA,SAAS;AAAA,YACvB,CAAa;AAAA,UACb,OAAiB;AACL,mBAAO;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA,UAAS,6BAAM,YAAWI,WAAc,eAAC,UAAU,KAAKA,WAAAA,eAAe;AAAA,YACrF,CAAa;AAAA,UACF;AAAA,QACF;AAAA,QACD,MAAM,CAAC,UAAU;;AAEf,eAAI,WAAM,WAAN,mBAAc,SAAS,YAAY;AACrC,mBAAO;AAAA,cACL,YAAYD,WAAY,aAAC;AAAA,cACzB,SAASC,WAAc,eAAC;AAAA,cACxB,WAAW;AAAA,YACzB,CAAa;AAAA,UACb,OAAiB;AACL,mBAAO;AAAA,cACL,YAAY;AAAA,cACZ,SAASA,WAAc,eAAC;AAAA,cACxB,gBAAgB;AAAA,cAChB;AAAA,YACd,CAAa;AAAA,UACF;AAAA,QACF;AAAA,MACT,CAAO;AAAA,IACP,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,WAAW,SAAS,WAAW;AAC7B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,aAAaJ,cAAG,MAAC,WAAW;AAAA,QAChC,GAAG;AAAA,QACH,SAAS,CAAC,aAAa;AACrB,gBAAM,EAAE,YAAY,KAAM,IAAG;AAE7B,cAAI,cAAc,OAAO,aAAa,KAAK;AACzC,gBAAI;AACF,oBAAM,eAAe,OAAO,SAAS,WAAW,KAAK,MAAM,IAAI,IAAI;AACnE,sBAAQ;AAAA,gBACN,MAAM;AAAA,gBACN;AAAA,gBACA,SAAS;AAAA,cACzB,CAAe;AAAA,YACF,SAAQ,YAAY;AACnB,sBAAQ;AAAA,gBACN;AAAA,gBACA;AAAA,gBACA,SAAS;AAAA,cACzB,CAAe;AAAA,YACF;AAAA,UACb,OAAiB;AACL,mBAAO;AAAA,cACL;AAAA,cACA,SAASI,WAAc,eAAC;AAAA,YACtC,CAAa;AAAA,UACF;AAAA,QACF;AAAA,QACD,MAAM,CAAC,UAAU;AACf,iBAAO;AAAA,YACL,YAAY;AAAA,YACZ,SAASA,WAAc,eAAC;AAAA,YACxB;AAAA,UACZ,CAAW;AAAA,QACF;AAAA,MACT,CAAO;AAGD,iBAAW,iBAAiB,CAAC,aAAa;AACxCJ,sBAAG,MAAC,MAAM,kBAAkB;AAAA,UAC1B;AAAA,UACA,UAAU,SAAS;AAAA,UACnB,gBAAgB,SAAS;AAAA,UACzB,0BAA0B,SAAS;AAAA,QAC7C,CAAS;AAAA,MACT,CAAO;AAAA,IACP,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,iBAAiB,QAAQ;AACvB,QAAI,CAAC,UAAU,OAAO,WAAW,UAAU;AACzC,aAAO;AAAA,IACR;AAED,UAAM,QAAQ,OAAO,KAAK,MAAM,EAC7B,OAAO,SAAO,OAAO,GAAG,MAAM,UAAa,OAAO,GAAG,MAAM,IAAI,EAC/D,IAAI,SAAO,GAAG,mBAAmB,GAAG,CAAC,IAAI,mBAAmB,OAAO,GAAG,CAAC,CAAC,EAAE,EAC1E,KAAK,GAAG;AAEX,WAAO,QAAQ,IAAI,KAAK,KAAK;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,IAAI,KAAK,SAAS,CAAA,GAAI,SAAS,CAAA,GAAI;AACjC,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,KAAK,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAChC,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,IAAI,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAC/B,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,KAAK,SAAS,IAAI;AACvB,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA,QAAQ;AAAA,MACR,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,KAAK,UAAU,SAAS,CAAA,GAAI;AACjC,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AACH;AAGA,MAAM,iBAAiB,IAAI;AAG3B,eAAe,sBAAsB,CAAC,WAAW;AAE/CA,gBAAAA,MAAA,MAAA,OAAA,2BAAY,SAAS;AAAA,IACnB,KAAK,OAAO;AAAA,IACZ,QAAQ,OAAO;AAAA,IACf,YAAW,oBAAI,KAAM,GAAC,YAAa;AAAA,EACvC,CAAG;AAED,SAAO;AACT,CAAC;AAGD,eAAe,uBAAuB,CAAC,aAAa;;AAElDA,gBAAAA,MAAA,MAAA,OAAA,2BAAY,SAAS;AAAA,IACnB,MAAK,cAAS,WAAT,mBAAiB;AAAA,IACtB,YAAY,SAAS;AAAA,IACrB,YAAW,oBAAI,KAAM,GAAC,YAAa;AAAA,EACvC,CAAG;AAED,SAAO;AACT,CAAC;AAGsB,eAAe,QAAQ,KAAK,cAAc;AAC9C,eAAe,IAAI,KAAK,cAAc;AACrC,eAAe,KAAK,KAAK,cAAc;AACxC,eAAe,IAAI,KAAK,cAAc;AACtC,eAAe,OAAO,KAAK,cAAc;AACtC,eAAe,OAAO,KAAK,cAAc;"}