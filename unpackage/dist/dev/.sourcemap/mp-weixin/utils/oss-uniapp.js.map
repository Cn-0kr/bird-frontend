{"version":3,"file":"oss-uniapp.js","sources":["utils/oss-uniapp.js"],"sourcesContent":["/**\n * uni-app专用OSS工具类\n * 针对uni-app环境优化，去除不兼容的API\n * @author Frontend Developer\n * @date 2025-07-03\n */\n\n// OSS配置 - 根据您的实际配置修改\nconst OSS_CONFIG = {\n  region: 'oss-cn-shanghai',\n  bucket: 'birdfront-oss',\n  endpoint: 'https://birdfront-oss.oss-cn-shanghai.aliyuncs.com',\n  customDomain: '', // 自定义CDN域名（可选）\n  \n  // 图片处理配置\n  imageProcess: {\n    quality: 80,\n    sizes: {\n      thumbnail: '150x150',\n      small: '300x300',\n      medium: '600x600', \n      large: '1200x1200',\n      banner: '1920x600'\n    },\n    format: 'webp',\n    fallbackFormat: 'jpg'\n  },\n  \n  // 环境配置\n  environment: {\n    current: process.env.NODE_ENV || 'development',\n    development: {\n      enableImageOptimization: false,\n      enableCache: false\n    },\n    production: {\n      enableImageOptimization: true,\n      enableCache: true\n    }\n  }\n}\n\n/**\n * 获取当前环境配置\n */\nfunction getCurrentConfig() {\n  const currentEnv = OSS_CONFIG.environment.current\n  const envConfig = OSS_CONFIG.environment[currentEnv] || OSS_CONFIG.environment.development\n  \n  return {\n    ...OSS_CONFIG,\n    ...envConfig\n  }\n}\n\n/**\n * 检查WebP支持\n */\nfunction supportsWebP() {\n  // #ifdef H5\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    try {\n      const canvas = document.createElement('canvas')\n      canvas.width = 1\n      canvas.height = 1\n      return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0\n    } catch (error) {\n      return false\n    }\n  }\n  // #endif\n  \n  // 小程序和App环境默认支持WebP\n  return true\n}\n\n/**\n * 获取最优图片格式\n */\nfunction getOptimalFormat() {\n  const config = getCurrentConfig()\n  return supportsWebP() ? config.imageProcess.format : config.imageProcess.fallbackFormat\n}\n\n/**\n * 构建图片处理参数\n * @param {Object} options - 处理选项\n * @returns {string} URL查询参数字符串\n */\nfunction buildImageProcessParams(options) {\n  const config = getCurrentConfig()\n  const params = []\n  \n  // 如果当前环境禁用了图片优化，直接返回空字符串\n  if (!config.enableImageOptimization) {\n    return ''\n  }\n\n  // 图片尺寸处理\n  if (options.size && config.imageProcess.sizes[options.size]) {\n    const size = config.imageProcess.sizes[options.size]\n    const [width, height] = size.split('x')\n    params.push(`x-oss-process=image/resize,m_fill,w_${width},h_${height}`)\n  } else if (options.width || options.height) {\n    let resizeParam = 'x-oss-process=image/resize,m_lfit'\n    if (options.width) resizeParam += `,w_${options.width}`\n    if (options.height) resizeParam += `,h_${options.height}`\n    params.push(resizeParam)\n  }\n\n  // 图片质量\n  const quality = options.quality || config.imageProcess.quality\n  if (quality && quality !== 100) {\n    params.push(`x-oss-process=image/quality,q_${quality}`)\n  }\n\n  // 图片格式转换\n  const format = options.format || getOptimalFormat()\n  if (format && format !== 'original') {\n    params.push(`x-oss-process=image/format,${format}`)\n  }\n\n  // 自定义处理参数\n  if (options.customParams && typeof options.customParams === 'object') {\n    Object.entries(options.customParams).forEach(([key, value]) => {\n      params.push(`${key}=${value}`)\n    })\n  }\n\n  // 组合多个处理参数\n  if (params.length > 1) {\n    const processParams = params.filter(p => p.startsWith('x-oss-process=')).map(p => p.replace('x-oss-process=', ''))\n    const otherParams = params.filter(p => !p.startsWith('x-oss-process='))\n    \n    if (processParams.length > 0) {\n      const combinedProcess = `x-oss-process=${processParams.join('/')}`\n      return [combinedProcess, ...otherParams].join('&')\n    }\n  }\n\n  return params.join('&')\n}\n\n/**\n * 获取OSS完整访问URL\n * @param {string} filename - 文件名（包含路径）\n * @param {Object} options - 可选参数\n * @returns {string} 完整的OSS访问URL\n */\nexport function getImageUrl(filename, options = {}) {\n  try {\n    // 参数验证\n    if (!filename || typeof filename !== 'string') {\n      console.warn('Filename is required and must be a string')\n      return ''\n    }\n\n    const config = getCurrentConfig()\n    \n    // 确定使用的域名\n    const baseUrl = options.useCustomDomain && config.customDomain \n      ? config.customDomain \n      : config.endpoint\n\n    // 清理文件名（移除开头的斜杠）\n    const cleanFilename = filename.startsWith('/') ? filename.slice(1) : filename\n\n    // 构建基础URL\n    let imageUrl = `${baseUrl}/${cleanFilename}`\n\n    // 添加图片处理参数\n    const processParams = buildImageProcessParams(options)\n    if (processParams) {\n      imageUrl += `?${processParams}`\n    }\n\n    return imageUrl\n\n  } catch (error) {\n    console.error('生成OSS图片URL失败:', error)\n    return filename\n  }\n}\n\n/**\n * 批量生成图片URL\n * @param {Array<string>} filenames - 文件名数组\n * @param {Object} options - 处理选项\n * @returns {Array<string>} URL数组\n */\nexport function batchGetImageUrls(filenames, options = {}) {\n  if (!Array.isArray(filenames)) {\n    console.warn('Filenames must be an array')\n    return []\n  }\n\n  return filenames.map(filename => getImageUrl(filename, options))\n}\n\n/**\n * 预加载图片（uni-app兼容版本）\n * @param {string|Array<string>} urls - 图片URL或URL数组\n * @returns {Promise<Array>} 预加载结果Promise数组\n */\nexport function preloadImages(urls) {\n  const urlArray = Array.isArray(urls) ? urls : [urls]\n  \n  return Promise.allSettled(\n    urlArray.map(url => {\n      return new Promise((resolve, reject) => {\n        // #ifdef H5\n        if (typeof Image !== 'undefined') {\n          const img = new Image()\n          img.onload = () => resolve(url)\n          img.onerror = () => reject(new Error(`Failed to load image: ${url}`))\n          img.src = url\n        } else {\n          resolve(url)\n        }\n        // #endif\n        \n        // #ifndef H5\n        uni.getImageInfo({\n          src: url,\n          success: () => resolve(url),\n          fail: (error) => reject(new Error(`Failed to load image: ${url}`))\n        })\n        // #endif\n      })\n    })\n  )\n}\n\n/**\n * 获取响应式图片URL集合\n * @param {string} filename - 文件名\n * @param {Array<string>} sizes - 尺寸数组\n * @param {Object} options - 额外选项\n * @returns {Object} 响应式图片URL对象\n */\nexport function getResponsiveImageUrls(filename, sizes = ['small', 'medium', 'large'], options = {}) {\n  const result = {}\n  \n  sizes.forEach(size => {\n    result[size] = getImageUrl(filename, { ...options, size })\n  })\n  \n  return result\n}\n\n/**\n * 生成图片srcset属性值\n * @param {string} filename - 文件名\n * @param {Object} sizeMapping - 尺寸映射\n * @param {Object} options - 额外选项\n * @returns {string} srcset属性值\n */\nexport function generateSrcSet(filename, sizeMapping = {\n  small: '480w',\n  medium: '768w', \n  large: '1200w'\n}, options = {}) {\n  return Object.entries(sizeMapping)\n    .map(([size, descriptor]) => {\n      const url = getImageUrl(filename, { ...options, size })\n      return `${url} ${descriptor}`\n    })\n    .join(', ')\n}\n\n/**\n * 处理图片路径，确保符合OSS格式\n * @param {string} path - 原始路径\n * @returns {string} 处理后的路径\n */\nexport function normalizeImagePath(path) {\n  if (!path) return ''\n  \n  // 移除开头的斜杠\n  if (path.startsWith('/')) {\n    path = path.slice(1)\n  }\n  \n  // 如果是完整的URL，提取文件名部分\n  if (path.includes('://')) {\n    const urlParts = path.split('/')\n    return urlParts.slice(3).join('/') // 移除协议和域名部分\n  }\n  \n  return path\n}\n\n/**\n * 获取带降级方案的图片URL\n * @param {string} filename - 文件名\n * @param {string} fallbackUrl - 降级URL\n * @param {Object} options - OSS选项\n * @returns {string} 图片URL\n */\nexport function getImageUrlWithFallback(filename, fallbackUrl = '', options = {}) {\n  try {\n    if (!filename) return fallbackUrl\n    return getImageUrl(filename, options) || fallbackUrl\n  } catch (error) {\n    console.warn('获取OSS URL失败，使用降级方案:', error)\n    return fallbackUrl\n  }\n}\n\n/**\n * 快捷方法：获取不同尺寸的图片URL\n */\nexport const getThumbnail = (filename) => getImageUrl(filename, { size: 'thumbnail', quality: 85 })\nexport const getSmallImage = (filename) => getImageUrl(filename, { size: 'small', quality: 85 })\nexport const getMediumImage = (filename) => getImageUrl(filename, { size: 'medium', quality: 80 })\nexport const getLargeImage = (filename) => getImageUrl(filename, { size: 'large', quality: 90 })\nexport const getBannerImage = (filename) => getImageUrl(filename, { size: 'banner', quality: 85 })\n\n/**\n * 创建简化版的OSS工具对象\n */\nconst ossUtils = {\n  getImageUrl,\n  batchGetImageUrls,\n  preloadImages,\n  getResponsiveImageUrls,\n  generateSrcSet,\n  normalizeImagePath,\n  getImageUrlWithFallback,\n  getThumbnail,\n  getSmallImage,\n  getMediumImage,\n  getLargeImage,\n  getBannerImage\n}\n\nexport default ossUtils\n\n/**\n * 使用示例：\n * \n * import { getImageUrl, getThumbnail, preloadImages } from '@/utils/oss-uniapp.js'\n * \n * // 基础用法\n * const imageUrl = getImageUrl('images/avatar.jpg')\n * \n * // 快捷方法\n * const thumbnailUrl = getThumbnail('images/avatar.jpg')\n * \n * // 自定义参数\n * const customUrl = getImageUrl('images/banner.jpg', { \n *   width: 800, \n *   height: 400, \n *   format: 'webp' \n * })\n * \n * // 预加载图片\n * preloadImages([imageUrl, thumbnailUrl]).then(results => {\n *   console.log('预加载完成', results)\n * })\n */"],"names":["uni"],"mappings":"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"}