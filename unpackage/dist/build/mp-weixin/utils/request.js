"use strict";const e=require("../common/vendor.js"),t=require("../config/api.js");const r=new class{constructor(){this.requestQueue=new Map,this.retryQueue=new Map,this.requestInterceptors=[],this.responseInterceptors=[],this.errorHandlers=new Map,this.loadingStates=new Set}addRequestInterceptor(e){this.requestInterceptors.push(e)}addResponseInterceptor(e){this.responseInterceptors.push(e)}addErrorHandler(e,t){this.errorHandlers.set(e,t)}getToken(){try{return e.index.getStorageSync(t.STORAGE_KEYS.TOKEN)}catch(r){return console.error("获取Token失败:",r),null}}setToken(r){try{e.index.setStorageSync(t.STORAGE_KEYS.TOKEN,r)}catch(s){console.error("设置Token失败:",s)}}clearToken(){try{e.index.removeStorageSync(t.STORAGE_KEYS.TOKEN),e.index.removeStorageSync(t.STORAGE_KEYS.REFRESH_TOKEN),e.index.removeStorageSync(t.STORAGE_KEYS.USER_INFO)}catch(r){console.error("清除Token失败:",r)}}buildHeaders(r={}){const s={...t.API_CONFIG.HEADERS,...r},o=this.getToken();o&&(s.Authorization=`Bearer ${o}`);const n=e.index.getSystemInfoSync();return s["X-Device-Type"]=n.platform,s["X-Device-Model"]=n.model,s["X-App-Version"]=n.version,s}generateRequestId(e){const{url:t,method:r,data:s}=e;return`${r}_${t}_${s?JSON.stringify(s):""}`.replace(/[^a-zA-Z0-9]/g,"_")}isDuplicateRequest(e){return this.requestQueue.has(e)}addToQueue(e,t){this.requestQueue.set(e,t),t.finally((()=>{this.requestQueue.delete(e)}))}showLoading(t,r={}){!1===r.showLoading||this.loadingStates.has(t)||(this.loadingStates.add(t),e.index.showLoading({title:r.loadingText||"加载中...",mask:!1!==r.mask}))}hideLoading(t){this.loadingStates.has(t)&&(this.loadingStates.delete(t),0===this.loadingStates.size&&e.index.hideLoading())}async executeRequestInterceptors(e){let t={...e};for(const s of this.requestInterceptors)try{t=await s(t)||t}catch(r){console.error("请求拦截器执行失败:",r)}return t}async executeResponseInterceptors(e){let t={...e};for(const s of this.responseInterceptors)try{t=await s(t)||t}catch(r){console.error("响应拦截器执行失败:",r)}return t}async handleResponseError(e,r){const{statusCode:s}=e;if(this.errorHandlers.has(s))try{const t=this.errorHandlers.get(s),o=await t(e,r);if(o)return o}catch(o){console.error("错误处理器执行失败:",o)}switch(s){case t.STATUS_CODES.UNAUTHORIZED:return this.handleUnauthorized(e,r);case t.STATUS_CODES.FORBIDDEN:return this.handleForbidden(e,r);case t.STATUS_CODES.TOO_MANY_REQUESTS:return this.handleRateLimit(e,r);case t.STATUS_CODES.INTERNAL_SERVER_ERROR:case t.STATUS_CODES.SERVICE_UNAVAILABLE:case t.STATUS_CODES.GATEWAY_TIMEOUT:return this.handleServerError(e,r);default:throw e}}async handleUnauthorized(r,s){throw this.clearToken(),e.index.reLaunch({url:"/pages/login/login"}),e.index.$emit("tokenExpired"),new Error(t.ERROR_MESSAGES.INVALID_TOKEN)}async handleForbidden(r,s){throw e.index.showToast({title:t.ERROR_MESSAGES.FORBIDDEN,icon:"error"}),new Error(t.ERROR_MESSAGES.FORBIDDEN)}async handleRateLimit(r,s){var o;const n=(null==(o=r.header)?void 0:o["Retry-After"])||60;throw e.index.showToast({title:`请求过于频繁，请${n}秒后重试`,icon:"error",duration:3e3}),setTimeout((()=>{this.request(s)}),1e3*n),new Error(t.ERROR_MESSAGES.TOO_MANY_REQUESTS)}async handleServerError(e,r){if(r.retryCount>0)return r.retryCount--,await new Promise((e=>{setTimeout(e,t.API_CONFIG.RETRY_DELAY)})),this.request(r);throw new Error(t.ERROR_MESSAGES.INTERNAL_SERVER_ERROR)}async handleNetworkError(r,s){if("none"===await this.getNetworkType())throw e.index.showToast({title:"网络连接不可用",icon:"error"}),new Error(t.ERROR_MESSAGES.NETWORK_ERROR);if(s.retryCount>0)return s.retryCount--,await new Promise((e=>{setTimeout(e,t.API_CONFIG.RETRY_DELAY)})),this.request(s);throw new Error(t.ERROR_MESSAGES.NETWORK_ERROR)}getNetworkType(){return new Promise((t=>{e.index.getNetworkType({success:e=>{t(e.networkType)},fail:()=>{t("unknown")}})}))}async request(e){const r=this.generateRequestId(e);try{if(this.isDuplicateRequest(r))return this.requestQueue.get(r);const s=await this.executeRequestInterceptors({retryCount:t.API_CONFIG.RETRY_COUNT,timeout:t.API_CONFIG.TIMEOUT,...e});this.showLoading(r,s);const o={url:s.url,method:s.method||"GET",header:this.buildHeaders(s.header),timeout:s.timeout};if(s.data&&("GET"===s.method?o.url+=this.buildQueryString(s.data):o.data=s.data),s.filePath)return this.uploadFile({...o,filePath:s.filePath,name:s.name||"file",formData:s.formData},r);const n=this.sendRequest(o);this.addToQueue(r,n);const a=await n;return await this.executeResponseInterceptors(a)}catch(s){try{return await this.handleResponseError(s,e)}catch(o){throw o}}finally{this.hideLoading(r)}}sendRequest(r){return new Promise(((s,o)=>{e.index.request({...r,success:e=>{const{statusCode:r,data:n,header:a}=e;r>=200&&r<300?s({data:n,statusCode:r,header:a,success:!0}):o({statusCode:r,data:n,header:a,message:(null==n?void 0:n.message)||t.ERROR_MESSAGES[r]||t.ERROR_MESSAGES.UNKNOWN_ERROR})},fail:e=>{var r;(null==(r=e.errMsg)?void 0:r.includes("timeout"))?o({statusCode:t.STATUS_CODES.REQUEST_TIMEOUT,message:t.ERROR_MESSAGES.TIMEOUT_ERROR,isTimeout:!0}):o({statusCode:0,message:t.ERROR_MESSAGES.NETWORK_ERROR,isNetworkError:!0,error:e})}})}))}uploadFile(r,s){return new Promise(((o,n)=>{e.index.uploadFile({...r,success:e=>{const{statusCode:r,data:s}=e;if(r>=200&&r<300)try{const e="string"==typeof s?JSON.parse(s):s;o({data:e,statusCode:r,success:!0})}catch(a){o({data:s,statusCode:r,success:!0})}else n({statusCode:r,message:t.ERROR_MESSAGES.UPLOAD_ERROR})},fail:e=>{n({statusCode:0,message:t.ERROR_MESSAGES.UPLOAD_ERROR,error:e})}}).onProgressUpdate((t=>{e.index.$emit("uploadProgress",{requestId:s,progress:t.progress,totalBytesSent:t.totalBytesSent,totalBytesExpectedToSend:t.totalBytesExpectedToSend})}))}))}buildQueryString(e){if(!e||"object"!=typeof e)return"";const t=Object.keys(e).filter((t=>void 0!==e[t]&&null!==e[t])).map((t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`)).join("&");return t?`?${t}`:""}get(e,t={},r={}){return this.request({url:e,method:"GET",data:t,...r})}post(e,t={},r={}){return this.request({url:e,method:"POST",data:t,...r})}put(e,t={},r={}){return this.request({url:e,method:"PUT",data:t,...r})}delete(e,t={}){return this.request({url:e,method:"DELETE",...t})}upload(e,t,r={}){return this.request({url:e,method:"POST",filePath:t,...r})}};r.addRequestInterceptor((e=>(console.log("请求发送:",{url:e.url,method:e.method,timestamp:(new Date).toISOString()}),e))),r.addResponseInterceptor((e=>{var t;return console.log("响应接收:",{url:null==(t=e.config)?void 0:t.url,statusCode:e.statusCode,timestamp:(new Date).toISOString()}),e})),r.request.bind(r),r.get.bind(r),r.post.bind(r),r.put.bind(r),r.delete.bind(r),r.upload.bind(r);
